<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LFS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-12T10:29:30.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tinyHouse</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo + Github Pages搭建个人独立博客</title>
    <link href="http://yoursite.com/2016/08/12/Hexo-Github-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/12/Hexo-Github-Pages搭建个人独立博客/</id>
    <published>2016-08-12T10:26:31.000Z</published>
    <updated>2016-08-12T10:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>异步程序的代码虽然书写在一起，但其实callback的入口和function本身的入口并不在一起；callback函数都是通过层层调用最终由系统I/O回调的(upcall)，而function call则都是通过用户层面调入的(downcall)；而异步程序的一个最基本的书写规范就是所有的回调函数不能在当前的执行序列中callback回去，必须在另外的入口回掉才是安全的，否则就会有重入问题；即在另外的执行流进行callback才是安全的。</p><p>当然如果你的能力足够高，可以违反上述规范，但是绝大多数人违反规范后是很容易出错的，且代码bug较多。</p><p>综上，一个好的异步框架/语言应该解决以下两个问题：</p><ol><li>callback hell：<ul><li>callback 嵌套过多，代码阅读性维护性低。</li></ul></li><li>callback规范：<ul><li>当前函数控制流中不能直接callback回去</li><li>有且仅有一个callback；通常上来说多callback容易出现莫名其妙的错误，少callback则会导致一些请求没有返回</li><li>结构化的callback</li></ul></li></ol><p>一般的异步框架如thenjs可以很好的解决callback hell，但是callback规范目前处理的并不是很好，而规范不能依靠程序员的自觉行为来维护，而是需要系统级别的机制来保证，PP就是针对此问题来设计和实现的，PP提供了一套结构化的callback来保证代码的正确性和高效性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;异步程序的代码虽然书写在一起，但其实callback的入口和function本身的入口并不在一起；callback函数都是通过层层调用最终由
      
    
    </summary>
    
    
  </entry>
  
</feed>
